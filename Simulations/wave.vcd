$date
  Wed Nov 15 18:28:50 2023
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$var reg 1 ! dec2exe_empty $end
$var reg 1 " exe_pop $end
$var reg 1 # dec_exe_wb $end
$var reg 1 $ dec_flag_wb $end
$var reg 1 % dec_pre_index $end
$var reg 1 & dec_mem_lw $end
$var reg 1 ' dec_mem_lb $end
$var reg 1 ( dec_mem_sw $end
$var reg 1 ) dec_mem_sb $end
$var reg 1 * dec_shift_lsl $end
$var reg 1 + dec_shift_lsr $end
$var reg 1 , dec_shift_asr $end
$var reg 1 - dec_shift_ror $end
$var reg 1 . dec_shift_rrx $end
$var reg 1 / dec_comp_op1 $end
$var reg 1 0 dec_comp_op2 $end
$var reg 1 1 dec_alu_cy $end
$var reg 1 2 mem_pop $end
$var reg 1 3 ck $end
$var reg 1 4 reset_n $end
$var reg 32 5 dec_op1[31:0] $end
$var reg 32 6 dec_op2[31:0] $end
$var reg 32 7 dec_mem_data[31:0] $end
$var reg 32 8 exe_res[31:0] $end
$var reg 32 9 exe_mem_adr[31:0] $end
$var reg 32 : exe_mem_data[31:0] $end
$var reg 1 ; exe_c $end
$var reg 1 < exe_v $end
$var reg 1 = exe_n $end
$var reg 1 > exe_z $end
$var reg 1 ? exe_wb $end
$var reg 1 @ exe_flag_wb $end
$var reg 1 A exe_mem_lw $end
$var reg 1 B exe_mem_lb $end
$var reg 1 C exe_mem_sw $end
$var reg 1 D exe_mem_sb $end
$var reg 1 E exe2mem_empty $end
$var reg 1 F dec_cy $end
$var reg 4 G exe_mem_dest[3:0] $end
$var reg 4 H dec_mem_dest[3:0] $end
$var reg 4 I exe_dest[3:0] $end
$var reg 4 J dec_exe_dest[3:0] $end
$var reg 2 K dec_alu_cmd[1:0] $end
$var reg 5 L dec_shift_val[4:0] $end
$var reg 1 M vdd $end
$var reg 1 N vss $end
$scope module uut $end
$var reg 1 O dec2exe_empty $end
$var reg 1 P exe_pop $end
$var reg 32 Q dec_op1[31:0] $end
$var reg 32 R dec_op2[31:0] $end
$var reg 4 S dec_exe_dest[3:0] $end
$var reg 1 T dec_exe_wb $end
$var reg 1 U dec_flag_wb $end
$var reg 32 V dec_mem_data[31:0] $end
$var reg 4 W dec_mem_dest[3:0] $end
$var reg 1 X dec_pre_index $end
$var reg 1 Y dec_mem_lw $end
$var reg 1 Z dec_mem_lb $end
$var reg 1 [ dec_mem_sw $end
$var reg 1 \ dec_mem_sb $end
$var reg 1 ] dec_shift_lsl $end
$var reg 1 ^ dec_shift_lsr $end
$var reg 1 _ dec_shift_asr $end
$var reg 1 ` dec_shift_ror $end
$var reg 1 a dec_shift_rrx $end
$var reg 5 b dec_shift_val[4:0] $end
$var reg 1 c dec_cy $end
$var reg 1 d dec_comp_op1 $end
$var reg 1 e dec_comp_op2 $end
$var reg 1 f dec_alu_cy $end
$var reg 2 g dec_alu_cmd[1:0] $end
$var reg 32 h exe_res[31:0] $end
$var reg 1 i exe_c $end
$var reg 1 j exe_v $end
$var reg 1 k exe_n $end
$var reg 1 l exe_z $end
$var reg 4 m exe_dest[3:0] $end
$var reg 1 n exe_wb $end
$var reg 1 o exe_flag_wb $end
$var reg 32 p exe_mem_adr[31:0] $end
$var reg 32 q exe_mem_data[31:0] $end
$var reg 4 r exe_mem_dest[3:0] $end
$var reg 1 s exe_mem_lw $end
$var reg 1 t exe_mem_lb $end
$var reg 1 u exe_mem_sw $end
$var reg 1 v exe_mem_sb $end
$var reg 1 w exe2mem_empty $end
$var reg 1 x mem_pop $end
$var reg 1 y ck $end
$var reg 1 z reset_n $end
$var reg 1 { vdd $end
$var reg 1 | vss $end
$var reg 1 } shift_c $end
$var reg 1 !" alu_c $end
$var reg 1 "" alu_z $end
$var reg 1 #" alu_n $end
$var reg 1 $" alu_v $end
$var reg 32 %" op2[31:0] $end
$var reg 32 &" op2_shift[31:0] $end
$var reg 32 '" op1[31:0] $end
$var reg 32 (" alu_res[31:0] $end
$var reg 32 )" res_reg[31:0] $end
$var reg 32 *" mem_adr[31:0] $end
$var reg 1 +" exe_push $end
$var reg 1 ," exe2mem_full $end
$var reg 1 -" mem_acces $end
$scope module shifter_inst $end
$var reg 1 ." shift_lsl $end
$var reg 1 /" shift_lsr $end
$var reg 1 0" shift_asr $end
$var reg 1 1" shift_ror $end
$var reg 1 2" shift_rrx $end
$var reg 5 3" shift_val[4:0] $end
$var reg 32 4" din[31:0] $end
$var reg 1 5" cin $end
$var reg 32 6" dout[31:0] $end
$var reg 1 7" cout $end
$var reg 1 8" vdd $end
$var reg 1 9" vss $end
$var reg 32 :" sig_dout[31:0] $end
$var reg 1 ;" sig_cout $end
$upscope $end
$scope module alu_inst $end
$var reg 32 <" op1[31:0] $end
$var reg 32 =" op2[31:0] $end
$var reg 1 >" cin $end
$var reg 2 ?" cmd[1:0] $end
$var reg 32 @" res[31:0] $end
$var reg 1 A" cout $end
$var reg 1 B" z $end
$var reg 1 C" n $end
$var reg 1 D" v $end
$var reg 1 E" vdd $end
$var reg 1 F" vss $end
$upscope $end
$scope module exec2mem $end
$var reg 72 G" din[71:0] $end
$var reg 72 H" dout[71:0] $end
$var reg 1 I" push $end
$var reg 1 J" pop $end
$var reg 1 K" full $end
$var reg 1 L" empty $end
$var reg 1 M" reset_n $end
$var reg 1 N" ck $end
$var reg 1 O" vdd $end
$var reg 1 P" vss $end
$var reg 72 Q" temp_dout[71:0] $end
$var reg 32 R" mem_adr[31:0] $end
$var reg 32 S" mem_data[31:0] $end
$var reg 4 T" mem_dest[3:0] $end
$var reg 1 U" mem_lw $end
$var reg 1 V" mem_lb $end
$var reg 1 W" mem_sw $end
$var reg 1 X" mem_sb $end
$upscope $end
$upscope $end
$enddefinitions $end
